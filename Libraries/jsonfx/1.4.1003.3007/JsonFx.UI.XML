<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonFx.UI</name>
    </assembly>
    <members>
        <member name="T:JsonFx.UI.Jbst.Extensions.JbstExtension">
            <summary>
            Base class for extending JBST with custom declarations
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.Extensions.JbstExtension.#ctor(System.String,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="value"></param>
            <param name="virtualPath"></param>
        </member>
        <member name="P:JsonFx.UI.Jbst.Extensions.JbstExtension.Value">
            <summary>
            Gets the extension content
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.Extensions.JbstExtension.Path">
            <summary>
            Gets the virtual path
            </summary>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstBuildResult">
            <summary>
            Encapsulates the binding logic for instantiating a JBST on a page.
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstBuildResult.#ctor(JsonFx.Json.EcmaScriptIdentifier)">
            <summary>
            Ctor
            </summary>
            <param name="jbstName"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstBuildResult.#ctor(JsonFx.Json.EcmaScriptIdentifier,JsonFx.Client.AutoMarkupType)">
            <summary>
            Ctor
            </summary>
            <param name="jbstName"></param>
            <param name="autoMarkup"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstBuildResult.Write(System.IO.TextWriter,System.Object)">
            <summary>
            Renders the JBST control reference and any stored data to be used.
            </summary>
            <param name="writer">output</param>
            <param name="data">data to be bound as an object which will be serialized</param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstBuildResult.Write(System.IO.TextWriter,System.Object,System.Int32,System.Int32)">
            <summary>
            Renders the JBST control reference and any stored data to be used.
            </summary>
            <param name="writer">output</param>
            <param name="data">data to be bound as an object which will be serialized</param>
            <param name="index">the data index</param>
            <param name="count">the total data count</param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstBuildResult.Write(System.IO.TextWriter,System.Object,System.Int32,System.Int32,JsonFx.UI.Jbst.JbstBuildResult.InnerCallback)">
            <summary>
            Renders the JBST control reference and any stored data to be used.
            </summary>
            <param name="writer">output</param>
            <param name="data">data to be bound as an object which will be serialized</param>
            <param name="index">the data index</param>
            <param name="count">the total data count</param>
            <param name="inner">a callback for writing inner placeholder content</param>
        </member>
        <member name="P:JsonFx.UI.Jbst.JbstBuildResult.JbstName">
            <summary>
            Gets the name of the JBST
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.JbstBuildResult.AutoMarkup">
            <summary>
            Gets the AutoMarkup setting from the JBST
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.JbstBuildResult.ID">
            <summary>
            Gets and sets the ID of the placeholder element
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.JbstBuildResult.IsDebug">
            <summary>
            Gets and sets if should render "Pretty-Printed".
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.SimpleJbstBuildResult.#ctor(JsonFx.Json.EcmaScriptIdentifier,JsonFx.Client.AutoMarkupType)">
            <summary>
            Ctor
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:JsonFx.UI.Jbst.Control">
            <summary>
            Convenience control for combining JBST controls and JSON data on an ASP.NET page.
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.Control.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.Control.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the JBST control reference and any stored data to be used.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:JsonFx.UI.Jbst.Control.Name">
            <summary>
            Gets and sets the script variable name of the JBST control to be bound.
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.Control.Data">
            <summary>
            Gets and sets data to be bound as JavaScript variable reference.
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.Control.InlineData">
            <summary>
            Gets and sets data to be bound as an object which will be serialized.
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.Control.Index">
            <summary>
            Gets and sets the data index, passed in when binding the data and JBST.
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.Control.Count">
            <summary>
            Gets and sets the total data count, passed in when binding the data and JBST.
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.Control.DataItems">
            <summary>
            Gets a dictionary of Data to emit to the page.
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.Control.IsDebug">
            <summary>
            Gets and sets if should render as a debuggable ("Pretty-Print") block.
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.Control.AutoMarkup">
            <summary>
            Gets and sets if should also render the data as markup for noscript clients.
            </summary>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstControl">
            <summary>
            Common base for all JBST nodes.
            </summary>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstControlCollection">
            <summary>
            Control collection for JBST nodes.
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstControlCollection.#ctor(JsonFx.UI.Jbst.JbstContainerControl)">
            <summary>
            Ctor
            </summary>
            <param name="owner"></param>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstContainerControl">
            <summary>
            Internal representation of a JBST element.
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstContainerControl.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstContainerControl.#ctor(System.String,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="tagName"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstContainerControl.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the control as JsonML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonFx.UI.Jbst.Extensions.ResourceJbstExtension.#ctor(System.String,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="value"></param>
            <param name="path"></param>
        </member>
        <member name="P:JsonFx.UI.Jbst.Extensions.ResourceJbstExtension.GlobalizationKey">
            <summary>
            Gets the resource key for this expression
            </summary>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstWriter">
            <summary>
            JBST Writer
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstWriter.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstWriter.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="virtualPath">path used for resolving App_LocalResources</param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstWriter.GetGlobals">
            <summary>
            Generates a globals list from import directives
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstWriter.SplitPrefix(System.String,System.String@)">
            <summary>
            Splits the prefix and tag name
            </summary>
            <param name="rawName"></param>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="P:JsonFx.UI.Jbst.JbstWriter.JbstParseTree">
            <summary>
            Gets the internal parse tree representation
            </summary>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstCommandBase">
            <summary>
            Internal base representation of JBST commands
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstCommandBase.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="commandName"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstCommandBase.ProcessArgument(System.String,System.String[])">
            <summary>
            Processes each argument allowing string literals to code expressions to function calls.
            </summary>
            <param name="defaultValue">the default value if none was supplied</param>
            <param name="keys">an ordered list of keys to check</param>
            <returns>the resulting expression</returns>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstCommandBase.EnumerableAdapter">
            <summary>
            A simple adapter for exposing the IEnumerable interface without exposing the IJsonSerializable interface
            </summary>
            <remarks>
            In order to wrap the output of the JbstControl IJsonSerializable was required, but this takes
            precedent over the IEnumerable interface which is what should be rendered inside the wrapper.
            </remarks>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstCommandBase.EnumerableAdapter.#ctor(System.Collections.IEnumerable)">
            <summary>
            Ctor
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.Extensions.AppSettingsJbstExtension.#ctor(System.String,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="value"></param>
            <param name="path"></param>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstLiteral">
            <summary>
            Represents literal text in a JBST document
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstLiteral.#ctor(System.String,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="text"></param>
            <param name="normalize">if should normalize whitespace on output</param>
        </member>
        <member name="P:JsonFx.UI.Jbst.JbstLiteral.Text">
            <summary>
            Gets and sets the text of this literal
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.JbstLiteral.NormalizedText">
            <summary>
            Gets the original text for this literal
            </summary>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstCompiler">
            <summary>
            Simple wrapper for compiling JBSTs
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstCompiler.Compile(System.IO.TextReader,System.String,System.Collections.Generic.List{JsonFx.BuildTools.ParseException},System.Collections.Generic.List{JsonFx.BuildTools.ParseException})">
            <summary>
            Compiles the provided input
            </summary>
            <param name="input"></param>
            <param name="filename"></param>
            <param name="compilationErrors"></param>
            <param name="compactionErrors"></param>
            <returns></returns>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstPlaceholder">
            <summary>
            Internal representation of a JBST placholder
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstPlaceholder.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstControlReference">
            <summary>
            Internal representation of a JBST control reference
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstControlReference.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstControlReference.Render(JsonFx.Json.JsonWriter)">
            <summary>
            Controls the control rendering style
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstControlReference.RenderSimpleControlReference(JsonFx.Json.JsonWriter)">
            <summary>
            Renders a simple data binding call to a named template.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstControlReference.RenderAnonymousTemplate(JsonFx.Json.JsonWriter)">
            <summary>
            Renders a data binding call to an inline anonymous template.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstControlReference.RenderWrapperControlReference(JsonFx.Json.JsonWriter)">
            <summary>
            Renders a data binding call to a named template with a nested inline anonymous placeholder template.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstInline">
            <summary>
            Internal representation of named JBST placholder inline content
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstInline.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:JsonFx.UI.Jbst.JbstCodeBlock">
            <summary>
            Internal representation of a JBST code block.
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstCodeBlock.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="type"></param>
            <param name="code"></param>
            <param name="path"></param>
        </member>
        <member name="P:JsonFx.UI.Jbst.JbstCodeBlock.Code">
            <summary>
            Gets the code block content
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstCommentBlock.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="code"></param>
            <param name="path"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstDeclarationBlock.#ctor">
            <summary>
            Ctor
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstDeclarationBlock.Append(JsonFx.UI.Jbst.JbstControl)">
            <summary>
            Append another code block onto declaration block
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstDeclarationBlock.Append(System.String)">
            <summary>
            Append another code block onto declaration block
            </summary>
            <param name="control"></param>
        </member>
        <member name="P:JsonFx.UI.Jbst.JbstDeclarationBlock.Code">
            <summary>
            Gets the declaration code block content
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.JbstDeclarationBlock.HasCode">
            <summary>
            Gets an indication if any code has been appended
            </summary>
        </member>
        <member name="P:JsonFx.UI.Jbst.JbstDeclarationBlock.OwnerName">
            <summary>
            Gets the name of the owning JBST
            </summary>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstExpressionBlock.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstUnparsedBlock.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstStatementBlock.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="code"></param>
            <param name="path"></param>
        </member>
        <member name="M:JsonFx.UI.Jbst.JbstExtensionBlock.#ctor(System.String,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="code"></param>
            <param name="path"></param>
        </member>
        <member name="P:JsonFx.UI.Jbst.JbstExtensionBlock.Extension">
            <summary>
            Gets the extension represented by this block
            </summary>
        </member>
    </members>
</doc>
